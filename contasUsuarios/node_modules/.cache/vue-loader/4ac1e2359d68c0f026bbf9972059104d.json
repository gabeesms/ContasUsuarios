{"remainingRequest":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\wamp64\\www\\smartpoint\\smartpoint\\src\\views\\Cadastro\\TurnoListaForm.vue?vue&type=template&id=072af53e&","dependencies":[{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\src\\views\\Cadastro\\TurnoListaForm.vue","mtime":1615206741691},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}