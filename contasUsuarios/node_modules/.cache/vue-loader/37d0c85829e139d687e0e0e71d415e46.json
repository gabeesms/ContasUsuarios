{"remainingRequest":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\wamp64\\www\\smartpoint\\smartpoint\\src\\views\\Cadastro\\LinhaForm.vue?vue&type=template&id=2946fc72&scoped=true&","dependencies":[{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\src\\views\\Cadastro\\LinhaForm.vue","mtime":1615206741691},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\smartpoint\\smartpoint\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LWNvbnRlbnQgc3R5bGU9Im1hcmdpbjogMTBweCI+CiAgPHYtc25hY2tiYXIKICAgIHYtbW9kZWw9InNuYWNrYmFyIgogICAgOmNvbG9yPSJjb2xvckJvcmRlciIKICAgIHNoYXBlZAogICAgdGltZW91dD0iMzAwMCIKICAgIDp2ZXJ0aWNhbD0idmVydGljYWwiCiAgPgogICAgPGI+e3sgdGV4dCB9fTwvYj4KICAgIDwhLS0gPHRlbXBsYXRlPiAtLT4KICAgIDwhLS0gPHYtYnRuICBAY2xpY2s9ImNhbmNlbGFTbmFjaygpIiBpY29uIGRhcmsgc21hbGw+CiAgICAgICAgPHYtaWNvbj5tZGktY2xvc2U8L3YtaWNvbj4KICAgICAgPC92LWJ0bj4gLS0+CiAgICA8IS0tIDx2LWJ0biBpY29uIHYtYmluZD0iYXR0cnMiIEBjbGljaz0ic25hY2tiYXIgPSBmYWxzZSI+bWRpLW1hZ25pZnk8L3YtYnRuPiAtLT4KICAgIDwhLS0gPC90ZW1wbGF0ZT4gLS0+CiAgPC92LXNuYWNrYmFyPgoKICA8ay1sb2FkaW5nIHRpdGxlPSJDYXJyZWdhbmRvIiA6ZGlhbG9nPSJkaWFsb2dMb2FkaW5nIj48L2stbG9hZGluZz4KCiAgPGstZGlhbG9nCiAgICBAZmVjaGFyRGlhbG9nPSJmZWNoYXJEaWFsb2dNZXNzYWdlIgogICAgOmRpYWxvZz0iZGlhbG9nTWVzc2FnZSIKICAgIHRpdGxlPSJNZW5zYWdlbSIKICAgIDp0ZXh0PSJ0ZXh0RXJyb3IiCiAgPjwvay1kaWFsb2c+CgogIDxrLWRpYWxvZwogICAgQGZlY2hhckRpYWxvZz0iZmVjaGFyRGlhbG9nTWVzc2FnZSIKICAgIDpkaWFsb2c9ImRpYWxvZ01lc3NhZ2UiCiAgICB0aXRsZT0iTWVuc2FnZW0iCiAgICA6dGV4dD0idGV4dEVycm9yIgogID48L2stZGlhbG9nPgoKICA8IS0tIERFTEVURSBDQVBBQ0lEQURFIExJTkhBIC0gSEFCSUxJREFERSAtLT4KICA8ay1kaWFsb2cKICAgIDpkaWFsb2c9ImRpYWxvZ0RlbGV0ZSIKICAgIHRpdGxlPSJSZW1vdmVyIHVtYSBGYXNlIGRvIFByb2Nlc3NvPyIKICAgIHRleHQ9IkEgb3BlcmHDp8OjbyBzZWxlY2lvbmFkYSBlIHN1YSBoYWJpbGlkYWRlIHNlcsOjbyBleGNsdcOtZGFzLiBFc3RhIGHDp8OjbyBuw6NvIHBvZGVyw6Egc2VyIGRlc2ZlaXRhLCBkZXNlamEgcmVhbG1lbnRlIGNvbnRpbnVhcj8iCiAgPgogICAgPHRlbXBsYXRlIHYtc2xvdDpidXR0b2VzPgogICAgICA8di1idG4KICAgICAgICBAY2xpY2s9ImRlbGV0ZUNhcGFjaWRhZGVMaW5oYUNhbmNlbGFyIgogICAgICAgIHdpZHRoPSIxMDAiCiAgICAgICAgdGV4dAogICAgICAgIGRhcmsKICAgICAgICBjb2xvcj0icmVkIGRhcmtlbi0yIgogICAgICAgID5DYW5jZWxhcjwvdi1idG4KICAgICAgPgogICAgICA8di1idG4KICAgICAgICBAY2xpY2s9ImRlbGV0ZUNhcGFjaWRhZGVMaW5oYUNvbmZpcm1hZG8iCiAgICAgICAgd2lkdGg9IjEwMCIKICAgICAgICB0ZXh0CiAgICAgICAgZGFyawogICAgICAgIGNvbG9yPSJncmVlbiBkYXJrZW4tMiIKICAgICAgICA+U2ltPC92LWJ0bgogICAgICA+CiAgICA8L3RlbXBsYXRlPgogIDwvay1kaWFsb2c+CgogIDwhLS0gQUREIFBST0NFU1NPIC0tPgogIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dBZGRQcm9jZXNzbyIgcGVyc2lzdGVudCBtYXgtd2lkdGg9IjYwMHB4Ij4KICAgIDx2LWNhcmQ+CiAgICAgIDx2LWNhcmQtdGl0bGUgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICMzMTNjNDIiPgogICAgICAgIDxzcGFuIHN0eWxlPSJjb2xvcjogd2hpdGUiIGNsYXNzPSJoZWFkbGluZSI+e3sgdGl0dWxvIH19PC9zcGFuPgogICAgICA8L3YtY2FyZC10aXRsZT4KICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgIDx2LXJvdz4KICAgICAgICAgIDwhLS0gPHYtY29sIGNvbHM9IjEyIiBzbT0iMyI+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICAgIGxhYmVsPSJDw7NkaWdvIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIwMDAxIgogICAgICAgICAgICAgIHYtbW9kZWw9ImNvZGlnb1Byb2Nlc3NvIgogICAgICAgICAgICAgIGRlbnNlCiAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICBtYXhsZW5ndGg9IjMwIgogICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiAyMHB4IgogICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICA8L3YtY29sPiAtLT4KICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIj4KICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgbGFiZWw9IkRlc2NyacOnw6NvIgogICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj0icGxhY2Vob2xkZXJQcm9jZXNzbyIKICAgICAgICAgICAgICB2LW1vZGVsPSJkZXNjcmljYW9Qcm9jZXNzbyIKICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgbWF4bGVuZ3RoPSIzMCIKICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDogMjBweCIKICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICA8L3Ytcm93PgogICAgICA8L3YtY2FyZC10ZXh0PgogICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgPHYtYnRuCiAgICAgICAgICBjb2xvcj0ib3JhbmdlIGxpZ2h0ZW4tMSIKICAgICAgICAgIHRleHQKICAgICAgICAgIHdpZHRoPSIxMDAiCiAgICAgICAgICBkYXJrCiAgICAgICAgICBAY2xpY2s9ImRpYWxvZ0FkZFByb2Nlc3NvID0gZmFsc2UiCiAgICAgICAgICA+Q2FuY2VsYXI8L3YtYnRuCiAgICAgICAgPgogICAgICAgIDx2LWJ0bgogICAgICAgICAgY29sb3I9Im9yYW5nZSBkYXJrZW4tMSIKICAgICAgICAgIHRleHQKICAgICAgICAgIHdpZHRoPSIxMDAiCiAgICAgICAgICBkYXJrCiAgICAgICAgICBAY2xpY2s9InNhdmVQcm9jZXNzbygpIgogICAgICAgICAgPlNhbHZhcjwvdi1idG4KICAgICAgICA+CiAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICA8L3YtY2FyZD4KICA8L3YtZGlhbG9nPgoKICA8IS0tIERFTEVURSBSRUNVUlNPIFRFQ05JQ08gLSBIQUJJTElEQURFIC0tPgogIDxrLWRpYWxvZwogICAgOmRpYWxvZz0iZGlhbG9nRGVsZXRlUmVjdXJzbyIKICAgIHRpdGxlPSJSZW1vdmVyIFJlY3Vyc28gVMOpY25pY28/IgogICAgdGV4dD0iTyBSZWN1cnNvIFTDqWNuaWNvIGUgc3VhIGhhYmlsaWRhZGUgc2Vyw6NvIGV4Y2x1w61kb3MuIEVzdGEgYcOnw6NvIG7Do28gcG9kZXLDoSBzZXIgZGVzZmVpdGEsIGRlc2VqYSByZWFsbWVudGUgY29udGludWFyPyIKICA+CiAgICA8dGVtcGxhdGUgdi1zbG90OmJ1dHRvZXM+CiAgICAgIDx2LWJ0bgogICAgICAgIEBjbGljaz0iZGVsZXRlUmVjdXJzb1RlY25pY29MaW5oYUNhbmNlbGFyIgogICAgICAgIHdpZHRoPSIxMDAiCiAgICAgICAgdGV4dAogICAgICAgIGRhcmsKICAgICAgICBjb2xvcj0icmVkIGRhcmtlbi0yIgogICAgICAgID5DYW5jZWxhcjwvdi1idG4KICAgICAgPgogICAgICA8di1idG4KICAgICAgICBAY2xpY2s9ImRlbGV0ZVJlY3Vyc29UZWNuaWNvTGluaGFDb25maXJtYWRvIgogICAgICAgIHdpZHRoPSIxMDAiCiAgICAgICAgdGV4dAogICAgICAgIGRhcmsKICAgICAgICBjb2xvcj0iZ3JlZW4gZGFya2VuLTIiCiAgICAgICAgPlNpbTwvdi1idG4KICAgICAgPgogICAgPC90ZW1wbGF0ZT4KICA8L2stZGlhbG9nPgoKICA8IS0tIE1PREFMIEFERCBDQVBBQ0lEQURFIC0tPgogIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2ciIHNjcm9sbGFibGUgZnVsbHNjcmVlbj4KICAgIDx2LWNhcmQ+CiAgICAgIDx2LWNhcmQtdGl0bGUgc3R5bGU9ImJhY2tncm91bmQ6ICMzMTNjNDIiPgogICAgICAgIDx2LXRvb2xiYXIgZmxhdCBkYXJrIGNvbG9yPSJwcmltYXJ5Ij4KICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGUgZmxhdD5GYXNlcyBkbyBQcm9jZXNzbzwvdi10b29sYmFyLXRpdGxlPgogICAgICAgIDwvdi10b29sYmFyPgogICAgICA8L3YtY2FyZC10aXRsZT4KICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgIDx2LWxpc3QtaXRlbT4KICAgICAgICAgIDx2LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICA8IS0tIDx2LWxpc3QtaXRlbS10aXRsZT5Db250ZW50IGZpbHRlcmluZzwvdi1saXN0LWl0ZW0tdGl0bGU+IC0tPgogICAgICAgICAgICA8di1saXN0LWl0ZW0tc3VidGl0bGU+CiAgICAgICAgICAgICAgPHYtY29udGFpbmVyPgogICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICA8di1zdWJoZWFkZXI+PGI+RGFkb3MgR2VyYWlzPC9iPjwvdi1zdWJoZWFkZXI+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIzIj4KICAgICAgICAgICAgICAgICAgICA8IS0tIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNhZENhcGFjaWRhZGVMaW5oYS5mYXNlIgogICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJGYXNlICoiCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRmFzZSBkYSBMaW5oYSIKICAgICAgICAgICAgICAgICAgICAgIDpydWxlcz0iWwogICAgICAgICAgICAgICAgICAgICAgICAoKSA9PgogICAgICAgICAgICAgICAgICAgICAgICAgICghIWNhZENhcGFjaWRhZGVMaW5oYS5mYXNlICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWRDYXBhY2lkYWRlTGluaGEuZmFzZS5sZW5ndGggPD0gMzApIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgJycsCiAgICAgICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgICAgICAgY291bnRlcj0iMzAiCiAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMzAiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPiAtLT4KICAgICAgICAgICAgICAgICAgICA8di1yb3cgc3R5bGU9Im1hcmdpbi10b3A6IC0xMnB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjExIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY2FkQ2FwYWNpZGFkZUxpbmhhLmZhc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVuc0Zhc2VzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjZW50ZXJlZC1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJGYXNlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRmFzZSBkYSBMaW5oYSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9Im51bWJlciIKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4tb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS10ZXh0PSJub21lIgogICAgICAgICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkF0YWxobyBjYWRhc3RybyBkZSBPcGVyYcOnw6NvIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTIwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNvbG9yPSJncmV5IiBAY2xpY2s9ImFkZFByb2Nlc3NvKCdGJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRpLXBsYXlsaXN0LXBsdXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjMiPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBzdHlsZT0ibWFyZ2luLXRvcDogLTEycHgiPgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTEiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjYWRDYXBhY2lkYWRlTGluaGEub3BlcmFjYW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVuc09wZXJhY2FvZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNlbnRlcmVkLWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9Ik9wZXJhw6fDo28iCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Ik9wZXJhw6fDtWVzIGRhIExpbmhhIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJhcGVuYXNOdW1lcm9zIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9Im51bWJlciIKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4tb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS10ZXh0PSJub21lIgogICAgICAgICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkF0YWxobyBjYWRhc3RybyBkZSBPcGVyYcOnw6NvIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTIwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNvbG9yPSJncmV5IiBAY2xpY2s9ImFkZFByb2Nlc3NvKCdPJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRpLXBsYXlsaXN0LXBsdXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjUiPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBzdHlsZT0ibWFyZ2luLXRvcDogLTEycHgiIG4+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY2FkQ2FwYWNpZGFkZUxpbmhhLmhhYmlsaWRhZGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJIYWJpbGlkYWRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iSGFiaWxpZGFkZXMgZGEgTGluaGEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVuc0hhYmlsaWRhZGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNoaXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGltZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS12YWx1ZT0iaWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS10ZXh0PSJub21lIgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4tb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJhcGVuYXNOdW1lcm9zIgogICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkF0YWxobyBjYWRhc3RybyBkZSBIYWJpbGlkYWRlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogLTIwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgIGZhYgogICAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNvbG9yPSJncmV5IiBAY2xpY2s9ImFkZFByb2Nlc3NvKCdIJykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRpLXBsYXlsaXN0LXBsdXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMSI+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZmxvYXQ6IHJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgIHYtaWY9IiFpc01vYmlsZSIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSIjRkI5NTE0IgogICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iQWRpY2lvbmFyIEZhc2UiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZENhZEhhYmlsaWRhZGVzTGluaGEoKSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGRhcms+bWRpLXBsdXM8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtLXN1YnRpdGxlPgogICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgIDwvdi1saXN0LWl0ZW0+CgogICAgICAgIDwhLS0gVEFCTEUgQ0FQQUNJREFERSBMSU5IQSAtIENBREFTVFJPIC0tPgogICAgICAgIDx2LWRpdmlkZXI+PC92LWRpdmlkZXI+CiAgICAgICAgPHYtbGlzdCB0aHJlZS1saW5lIHN1YmhlYWRlcj4KICAgICAgICAgIDx2LWNvbnRhaW5lcj4KICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgIDx2LXN1YmhlYWRlcj48Yj5PcGVyYcOnw7VlcyB4IEhhYmlsaWRhZGVzPC9iPjwvdi1zdWJoZWFkZXI+CiAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDx2LXJvdyBhbGlnbj0iY2VudGVyIiBqdXN0aWZ5PSJjZW50ZXIiPgogICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICA8ay1kYXRhLWxpc3QKICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb249Ikhvcml6b250YWwiCiAgICAgICAgICAgICAgICAgIG1vYmlsZUljb25BZGQ9Im1kaS1wbHVzLWNpcmNsZSIKICAgICAgICAgICAgICAgICAgbW9iaWxlRnVuY3Rpb25BZGQ9ImFkZFNvbGljaXRhY2FvIgogICAgICAgICAgICAgICAgICA6aGVhZGVycz0iaGVhZGVyc0NhZENhcGFjaWRhZGVMaW5oYSIKICAgICAgICAgICAgICAgICAgOml0ZW5zPSJpdGVuc0NhZENhcGFjaWRhZGVMaW5oYSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpxdGRlT3BlcmFkb3I9InsgaXRlbSB9Ij4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iMCIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9Im51bWJlciIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Iml0ZW0ucXRkZU9wZXJhZG9yIgogICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodDsgbWFyZ2luLXRvcDogMjBweCIKICAgICAgICAgICAgICAgICAgICAgIDpydWxlcz0iWwogICAgICAgICAgICAgICAgICAgICAgICAoKSA9PgogICAgICAgICAgICAgICAgICAgICAgICAgICghIWl0ZW0ucXRkZU9wZXJhZG9yICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnF0ZGVPcGVyYWRvci5sZW5ndGggPD0gMTUpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgKCcnICYmICEhaXRlbS5xdGRlT3BlcmFkb3IgPCAxKSwKICAgICAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJhcGVuYXNOdW1lcm9zIgogICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJjYWxjdWxhT3BlcmFkb3JYVGltZSgnQ0wnKSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjZW50ZXJlZC1pbnB1dCIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGltZT0ieyBpdGVtIH0iPgogICAgICAgICAgICAgICAgICAgIDwhLS0gPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgOnJlZj0iaXRlbS5ub21lUmVmIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXRlbS5tZW51MiIKICAgICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgIDpudWRnZS1yaWdodD0iNDAiCiAgICAgICAgICAgICAgICAgICAgICA6cmV0dXJuLXZhbHVlLnN5bmM9Iml0ZW0udGltZSIKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aD0iMjkwcHgiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPgogICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IjAwOjAwIgogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Iml0ZW0udGltZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDogMThweCIKICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249Im1kaS1jbG9jay10aW1lLWZvdXItb3V0bGluZSIKICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgPHYtdGltZS1waWNrZXIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXRlbS50aW1lIgogICAgICAgICAgICAgICAgICAgICAgICBmdWxsLXdpZHRoCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9Iml0ZW0ubWVudTIgPSBmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIENhbmNlbGFyCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IiRyZWZzW2l0ZW0ubm9tZVJlZl0uc2F2ZShpdGVtLnRpbWUpIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgT0sKICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj48L3YtdGltZS1waWNrZXIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4gLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Iml0ZW0udGltZSIKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIwMDowMDowMCIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRpbWUiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQ7IG1hcmdpbi10b3A6IDIwcHgiCiAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgIEBrZXlwcmVzcz0iYXBlbmFzTnVtZXJvcyIKICAgICAgICAgICAgICAgICAgICAgIEBpbnB1dD0iY2FsY3VsYU9wZXJhZG9yWFRpbWUoJ0NMJykiCiAgICAgICAgICAgICAgICAgICAgICBzdGVwPSIxIgogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpvcGVyYWRvclh0aW1lPSJ7IGl0ZW0gfSI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Iml0ZW0ub3BlcmFkb3JYdGltZSIKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIwMDowMDowMCIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRpbWUiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQ7IG1hcmdpbi10b3A6IDIwcHgiCiAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgIHN0ZXA9IjEiCiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KCiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6cXRkZVBlY2FNaW51dG9PcGVyYWRvcj0ieyBpdGVtIH0iPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIwIgogICAgICAgICAgICAgICAgICAgICAgdHlwZT0ibnVtYmVyIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXRlbS5xdGRlUGVjYU1pbnV0b09wZXJhZG9yIgogICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodDsgbWFyZ2luLXRvcDogMjBweCIKICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNlbnRlcmVkLWlucHV0IgogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpxdGRlUGVjYU9wZXJhZG9yUHJvZHVjYW89InsgaXRlbSB9Ij4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iMCIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9Im51bWJlciIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Iml0ZW0ucXRkZVBlY2FPcGVyYWRvclByb2R1Y2FvIgogICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodDsgbWFyZ2luLXRvcDogMjBweCIKICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNlbnRlcmVkLWlucHV0IgogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDwvay1kYXRhLWxpc3Q+CiAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgPC92LWxpc3Q+CiAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgIDx2LWRpdmlkZXI+PC92LWRpdmlkZXI+CiAgICAgIDx2LWNhcmQtYWN0aW9ucz4KICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICA8di1idG4KICAgICAgICAgIGNvbG9yPSJvcmFuZ2UgbGlnaHRlbi0xIgogICAgICAgICAgQGNsaWNrPSJjYW5jZWxhU2F2ZUNhcGFjaWRhZGVMaW5oYSgpIgogICAgICAgICAgbGFyZ2UKICAgICAgICAgIGRhcmsKICAgICAgICAgIHdpZHRoPSIxNTAiCiAgICAgICAgICA+Q2FuY2VsYXI8L3YtYnRuCiAgICAgICAgPgoKICAgICAgICA8di1idG4KICAgICAgICAgIHYtaWY9IiFpc01vYmlsZSIKICAgICAgICAgIGNvbG9yPSJvcmFuZ2UgZGFya2VuLTEiCiAgICAgICAgICBsYXJnZQogICAgICAgICAgZGFyawogICAgICAgICAgd2lkdGg9IjE1MCIKICAgICAgICAgIEBjbGljaz0ic2F2ZUNhcGFjaWRhZGVMaW5oYSgpIgogICAgICAgICAgPlNhbHZhcjwvdi1idG4KICAgICAgICA+CgogICAgICAgIDx2LWJ0bgogICAgICAgICAgdi1lbHNlLWlmPSJpc01vYmlsZSIKICAgICAgICAgIGNvbG9yPSJvcmFuZ2UgZGFya2VuLTEiCiAgICAgICAgICBsYXJnZQogICAgICAgICAgZGFyawogICAgICAgICAgd2lkdGg9IjE1MCIKICAgICAgICAgIEBjbGljaz0ic2F2ZUNhcGFjaWRhZGVMaW5oYSgpIgogICAgICAgICAgPlNhbHZhcjwvdi1idG4KICAgICAgICA+CiAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICA8L3YtY2FyZD4KICA8L3YtZGlhbG9nPgoKICA8IS0tIE1PREFMIEFERCBSRUNVUlNPIFRFQ05JQ08gLS0+CiAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZ1JlY3Vyc29UZWNuaWNvIiBzY3JvbGxhYmxlIGZ1bGxzY3JlZW4+CiAgICA8di1jYXJkPgogICAgICA8di1jYXJkLXRpdGxlIHN0eWxlPSJiYWNrZ3JvdW5kOiAjMzEzYzQyIj4KICAgICAgICA8di10b29sYmFyIGZsYXQgZGFyayBjb2xvcj0icHJpbWFyeSI+CiAgICAgICAgICA8di10b29sYmFyLXRpdGxlIGZsYXQ+UmVjdXJzb3MgVMOpY25pY29zPC92LXRvb2xiYXItdGl0bGU+CiAgICAgICAgPC92LXRvb2xiYXI+CiAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPgogICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgPHYtbGlzdC1pdGVtPgogICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQ+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1zdWJ0aXRsZT4KICAgICAgICAgICAgICA8di1jb250YWluZXI+CiAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgIDx2LXN1YmhlYWRlcj48Yj5EYWRvcyBHZXJhaXM8L2I+PC92LXN1YmhlYWRlcj4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjMiPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdyBzdHlsZT0ibWFyZ2luLXRvcDogLTEycHgiPgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTEiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjYWRSZWN1cnNvc1RlY25pY29zLmZhc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVuc0Zhc2VzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjZW50ZXJlZC1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJGYXNlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRmFzZSBkbyBSZWN1cnNvIFTDqWNuaWNvIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0ibnVtYmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybi1vYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLXRleHQ9Im5vbWUiCiAgICAgICAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iQXRhbGhvIGNhZGFzdHJvIGRlIE9wZXJhw6fDo28iCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAtMjBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9ImdyZXkiIEBjbGljaz0iYWRkUHJvY2Vzc28oJ0YnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZGktcGxheWxpc3QtcGx1cwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMyI+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93IHN0eWxlPSJtYXJnaW4tdG9wOiAtMTJweCI+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNhZFJlY3Vyc29zVGVjbmljb3Mub3BlcmFjYW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVuc09wZXJhY2FvZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNlbnRlcmVkLWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9Ik9wZXJhw6fDo28iCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Ik9wZXJhw6fDtWVzIGRhIExpbmhhIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJhcGVuYXNOdW1lcm9zIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9Im51bWJlciIKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4tb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS10ZXh0PSJub21lIgogICAgICAgICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkF0YWxobyBjYWRhc3RybyBkZSBQcm9jZXNzb3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAtMjBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9ImdyZXkiIEBjbGljaz0iYWRkUHJvY2Vzc28oJ08nKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZGktcGxheWxpc3QtcGx1cwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iNSI+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93IHN0eWxlPSJtYXJnaW4tdG9wOiAtMTJweCIgbj4KICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjExIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjYWRSZWN1cnNvc1RlY25pY29zLmhhYmlsaWRhZGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJIYWJpbGlkYWRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iSGFiaWxpZGFkZXMgZGEgTGluaGEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVuc0hhYmlsaWRhZGVzIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNoaXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGltZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS12YWx1ZT0iaWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS10ZXh0PSJub21lIgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4tb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJhcGVuYXNOdW1lcm9zIgogICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkF0YWxobyBjYWRhc3RybyBkZSBQcm9jZXNzb3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAtMjBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9ImdyZXkiIEBjbGljaz0iYWRkUHJvY2Vzc28oJ0gnKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZGktcGxheWxpc3QtcGx1cwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxIj4KICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmbG9hdDogcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgdi1pZj0iIWlzTW9iaWxlIgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9IiNGQjk1MTQiCiAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkQ2FkUmVjdXJzb1RlY25pY29MaW5oYSgpIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gZGFyaz5tZGktcGx1czwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tc3VidGl0bGU+CiAgICAgICAgICA8L3YtbGlzdC1pdGVtLWNvbnRlbnQ+CiAgICAgICAgPC92LWxpc3QtaXRlbT4KCiAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KICAgICAgICA8di1saXN0IHRocmVlLWxpbmUgc3ViaGVhZGVyPgogICAgICAgICAgPHYtY29udGFpbmVyPgogICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgPHYtc3ViaGVhZGVyPjxiPk9wZXJhw6fDtWVzIHggSGFiaWxpZGFkZXM8L2I+PC92LXN1YmhlYWRlcj4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGp1c3RpZnk9ImNlbnRlciI+CiAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgIDxrLWRhdGEtbGlzdAogICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbj0iSG9yaXpvbnRhbCIKICAgICAgICAgICAgICAgICAgbW9iaWxlSWNvbkFkZD0ibWRpLXBsdXMtY2lyY2xlIgogICAgICAgICAgICAgICAgICBtb2JpbGVGdW5jdGlvbkFkZD0iYWRkU29saWNpdGFjYW8iCiAgICAgICAgICAgICAgICAgIDpoZWFkZXJzPSJoZWFkZXJzQ2FkUmVjdXJzb1RlY25pY29MaW5oYSIKICAgICAgICAgICAgICAgICAgOml0ZW5zPSJpdGVuc0NhZFJlY3Vyc29zVGVjbmljb3MiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6cXRkZU9wZXJhZG9yPSJ7IGl0ZW0gfSI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IjAiCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJudW1iZXIiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpdGVtLnF0ZGVPcGVyYWRvciIKICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQ7IG1hcmdpbi10b3A6IDIwcHgiCiAgICAgICAgICAgICAgICAgICAgICA6cnVsZXM9IlsKICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4KICAgICAgICAgICAgICAgICAgICAgICAgICAoISFpdGVtLnF0ZGVPcGVyYWRvciAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5xdGRlT3BlcmFkb3IubGVuZ3RoIDw9IDE1KSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICgnJyAmJiAhIWl0ZW0ucXRkZU9wZXJhZG9yIDwgMSksCiAgICAgICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgIEBrZXlwcmVzcz0iYXBlbmFzTnVtZXJvcyIKICAgICAgICAgICAgICAgICAgICAgIEBpbnB1dD0iY2FsY3VsYU9wZXJhZG9yWFRpbWUoJ1JUJykiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2VudGVyZWQtaW5wdXQiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICA8IS0tIDx0ZW1wbGF0ZSB2LXNsb3Q6dGltZT0ieyBpdGVtIH0iPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpdGVtLnRpbWUiCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iMDA6MDA6MDAiCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0aW1lIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InRleHQtYWxpZ246IHJpZ2h0OyBtYXJnaW4tdG9wOiAyMHB4IgogICAgICAgICAgICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICBAa2V5cHJlc3M9ImFwZW5hc051bWVyb3MiCiAgICAgICAgICAgICAgICAgICAgICBzdGVwPSIxIgogICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJjYWxjdWxhT3BlcmFkb3JYVGltZSgnUlQnKSIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6b3BlcmFkb3JYdGltZT0ieyBpdGVtIH0iPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpdGVtLm9wZXJhZG9yWHRpbWUiCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iMDA6MDA6MDAiCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0aW1lIgogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InRleHQtYWxpZ246IHJpZ2h0OyBtYXJnaW4tdG9wOiAyMHB4IgogICAgICAgICAgICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICBzdGVwPSIxIgogICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+IC0tPgogICAgICAgICAgICAgICAgPC9rLWRhdGEtbGlzdD4KICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICA8L3YtbGlzdD4KICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgIDx2LWJ0bgogICAgICAgICAgY29sb3I9Im9yYW5nZSBsaWdodGVuLTEiCiAgICAgICAgICBAY2xpY2s9ImNhbmNlbGFTYXZlQ2FwYWNpZGFkZUxpbmhhKCkiCiAgICAgICAgICBsYXJnZQogICAgICAgICAgZGFyawogICAgICAgICAgd2lkdGg9IjE1MCIKICAgICAgICAgID5DYW5jZWxhcjwvdi1idG4KICAgICAgICA+CgogICAgICAgIDx2LWJ0bgogICAgICAgICAgdi1pZj0iIWlzTW9iaWxlIgogICAgICAgICAgY29sb3I9Im9yYW5nZSBkYXJrZW4tMSIKICAgICAgICAgIGxhcmdlCiAgICAgICAgICBkYXJrCiAgICAgICAgICB3aWR0aD0iMTUwIgogICAgICAgICAgQGNsaWNrPSJzYXZlUmVjdXJzb1RlY25pY29MaW5oYSgpIgogICAgICAgICAgPlNhbHZhcjwvdi1idG4KICAgICAgICA+CgogICAgICAgIDx2LWJ0bgogICAgICAgICAgdi1lbHNlLWlmPSJpc01vYmlsZSIKICAgICAgICAgIGNvbG9yPSJvcmFuZ2UgZGFya2VuLTEiCiAgICAgICAgICBsYXJnZQogICAgICAgICAgZGFyawogICAgICAgICAgd2lkdGg9IjE1MCIKICAgICAgICAgIEBjbGljaz0ic2F2ZVJlY3Vyc29UZWNuaWNvTGluaGEoKSIKICAgICAgICAgID5TYWx2YXI8L3YtYnRuCiAgICAgICAgPgogICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgPC92LWNhcmQ+CiAgPC92LWRpYWxvZz4KCiAgPHYtY29udGFpbmVyPgogICAgPHYtcm93PgogICAgICA8di1icmVhZGNydW1icyBzdHlsZT0ibWFyZ2luLWxlZnQ6IC0xMHB4IiA6aXRlbXM9ImNhbWluaG8iPgogICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZGl2aWRlcj4KICAgICAgICAgIDwhLS0gPHYtaWNvbj5tZGktaG9tZTwvdi1pY29uPiAtLT4KICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6aXRlbT0ieyBpdGVtIH0iPgogICAgICAgICAgPHJvdXRlci1saW5rIDp0bz0iaXRlbS5ocmVmIj4KICAgICAgICAgICAge3sgaXRlbS50ZXh0IH19CiAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgIDwvdGVtcGxhdGU+CiAgICAgIDwvdi1icmVhZGNydW1icz4KICAgIDwvdi1yb3c+CgogICAgPHYtY29sIGNvbHM9IjEyIiB2LWlmPSJpZExpbmhhIj4KICAgICAgPGgzPgogICAgICAgIDxiPk1vZGVsbyAoUHJvZHV0byk8L2I+CiAgICAgIDwvaDM+CiAgICAgIDxzcGFuPgogICAgICAgIDxiPkNhZGFzdHJhbmRvIC8gQWx0ZXJhbmRvIGRhZG9zIGRvIE1vZGVsbyAoUHJvZHV0bykgbm8gc2lzdGVtYTwvYj4KICAgICAgPC9zcGFuPgogICAgPC92LWNvbD4KICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjEyIj4KICAgICAgPHYtcm93PgogICAgICAgIDxzcGFuPjxiPkRhZG9zIEdlcmFpczwvYj48L3NwYW4+CiAgICAgIDwvdi1yb3c+CgogICAgICA8di1yb3c+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iNyI+CiAgICAgICAgICA8di1hdXRvY29tcGxldGUKICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgdi1tb2RlbD0icHJvZHV0byIKICAgICAgICAgICAgbGFiZWw9Ik1vZGVsbyAoUHJvZHV0bykiCiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJTZWxlY2lvbmUgbyBNb2RlbG8gKFByb2R1dG8pIgogICAgICAgICAgICA6aXRlbXM9Iml0ZW5zUHJvZHV0b3MiCiAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodCIKICAgICAgICAgICAgaXRlbS12YWx1ZT0iaWQiCiAgICAgICAgICAgIGl0ZW0tdGV4dD0iZGFkb3NQcm9kdXRvIgogICAgICAgICAgICBkZW5zZQogICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICByZXR1cm4tb2JqZWN0CiAgICAgICAgICAgIDpkaXNhYmxlZD0iZGlzYWJsZWRQcm9kdXRvIgogICAgICAgICAgPgogICAgICAgICAgPC92LWF1dG9jb21wbGV0ZT4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIyIj4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgY2xhc3M9ImNlbnRlcmVkLWlucHV0IgogICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICB2LW1vZGVsPSJsaW5oYS5xdGRlT3BlcmFkb3IiCiAgICAgICAgICAgIGxhYmVsPSJRdGRlLiBkZSBPcGVyYWRvcmVzIgogICAgICAgICAgICBwbGFjZWhvbGRlcj0iQ2FwIGRlIE9wZXJhZG9yZXMiCiAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgIHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodCIKICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgQGtleXByZXNzPSJhcGVuYXNOdW1lcm9zIgogICAgICAgICAgICBAaW5wdXQ9InNvbWFRdGRlT3BlcmFkb3Jlc0NhcGFjaWRhZGVQcm9kdXRpdmEiCiAgICAgICAgICAgIHR5cGU9Im51bWJlciIKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgoKICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIzIj4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgY2xhc3M9ImNlbnRlcmVkLWlucHV0IgogICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICB2LW1vZGVsPSJsaW5oYS5jYXBhY2lkYWRlUHJvZHV0aXZhIgogICAgICAgICAgICBsYWJlbD0iVGVtcG8gZGUgUHJvZHXDp8OjbyBUb3RhbCBkYSBMaW5oYSIKICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlRlbXBvIFRvdGFsIFByb2R1w6fDo28iCiAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgIEBpbnB1dD0ic29tYVF0ZGVPcGVyYWRvcmVzQ2FwYWNpZGFkZVByb2R1dGl2YSIKICAgICAgICAgICAgc3R5bGU9InRleHQtYWxpZ246IHJpZ2h0IgogICAgICAgICAgICBkZW5zZQogICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1jb2w+CiAgICAgIDwvdi1yb3c+CgogICAgICA8di1yb3c+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMiI+CiAgICAgICAgICA8c3Bhbj48Yj5GYXNlcyBkbyBQcm9jZXNzbzwvYj48L3NwYW4+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxIj4KICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDogLThweDsgbWFyZ2luLWxlZnQ6IC0yNXB4IgogICAgICAgICAgICBzbWFsbAogICAgICAgICAgICB2LWlmPSIhaXNNb2JpbGUiCiAgICAgICAgICAgIGNvbG9yPSIjRkI5NTE0IgogICAgICAgICAgICBmYWIKICAgICAgICAgICAgZGFyawogICAgICAgICAgICB0aXRsZT0iSW5zZXJpciBOb3ZhIEZhc2UgZG8gUHJvY2Vzc28iCiAgICAgICAgICAgIEBjbGljaz0iYWRkQ2FwYWNpZGFkZUxpbmhhKCkiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24gZGFyaz5tZGktcGx1czwvdi1pY29uPgogICAgICAgICAgPC92LWJ0bj4KICAgICAgICA8L3YtY29sPgogICAgICA8L3Ytcm93PgoKICAgICAgPCEtLSBUQUJMRSBDUEFDSURBREUgWCBIQUJJTElEQURFIC0gQ0FQQUNJREFERSBMSU5IQSAtLT4KICAgICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGp1c3RpZnk9ImNlbnRlciI+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIj4KICAgICAgICAgIDx2LWRhdGEtdGFibGUKICAgICAgICAgICAgOmhlYWRlcnM9ImhlYWRlcnNMaW5oYSIKICAgICAgICAgICAgOml0ZW1zPSJpdGVuc0NhcGFjaWRhZGVMaW5oYSIKICAgICAgICAgICAgOnNpbmdsZS1leHBhbmQ9InNpbmdsZUV4cGFuZCIKICAgICAgICAgICAgaXRlbS1rZXk9ImlkIgogICAgICAgICAgICBzaG93LWV4cGFuZAogICAgICAgICAgICBjbGFzcz0iZWxldmF0aW9uLTEiCiAgICAgICAgICAgIGhpZGUtZGVmYXVsdC1oZWFkZXIKICAgICAgICAgICAgaGlkZS1kZWZhdWx0LWZvb3RlcgogICAgICAgICAgPgogICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Oml0ZW0uZmFzZT0ieyBpdGVtIH0iPgogICAgICAgICAgICAgIHt7IGl0ZW0ucHJvY2Vzc29EVE9GYXNlLm5vbWUgfX0KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHBhbmRlZC1pdGVtPSJ7IGhlYWRlcnMsIGl0ZW0gfSI+CiAgICAgICAgICAgICAgPHRkIDpjb2xzcGFuPSJoZWFkZXJzLmxlbmd0aCI+CiAgICAgICAgICAgICAgICA8IS0tIFRBQkxFIElOVEVSTkEgIC0tPgogICAgICAgICAgICAgICAgPHYtZGF0YS10YWJsZQogICAgICAgICAgICAgICAgICA6aGVhZGVycz0iaGVhZGVyc05vdmFMaW5oYSIKICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVtLmxpbmhhQ2FwYWNpZGFkZUhhYmlsaWRhZGVzIgogICAgICAgICAgICAgICAgICBoaWRlLWRlZmF1bHQtZm9vdGVyCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiAxNXB4IgogICAgICAgICAgICAgICAgICBjbGFzcz0iZWxldmF0aW9uLTEgbXl0YWJsZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PSJ7IGl0ZW1zIH0iPgogICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj0iKGl0ZW0yLCBpbmRleCkgaW4gaXRlbXMiIDprZXk9ImluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtLnByb2Nlc3NvRFRPT3BlcmFjYW8ubm9tZSB9fQogICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtMi5wcm9jZXNzb0RUT0hhYmlsaWRhZGUubm9tZSB9fQogICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJudW1iZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpdGVtMi5xdGRlT3BlcmFkb3JlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiA0M3B4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJ1bGVzPSJbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCEhaXRlbTIucXRkZU9wZXJhZG9yZXMgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0yLnF0ZGVPcGVyYWRvcmVzLmxlbmd0aCA8PSAxNSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJycgJiYgISFpdGVtMi5xdGRlT3BlcmFkb3JlcyA8IDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAa2V5cHJlc3M9ImFwZW5hc051bWVyb3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9InNvbWFRdGRlT3BlcmFkb3Jlc0NhcGFjaWRhZGVQcm9kdXRpdmEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgc209IjExIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRpbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpdGVtMi50aW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDQzcHg7IGJvcmRlci13aWR0aDogMXB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJ1bGVzPSJbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCEhaXRlbTIudGltZSAmJiBpdGVtMi50aW1lLmxlbmd0aCA8PSAxNSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJycgJiYgISFpdGVtMi50aW1lIDwgMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcD0iMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAa2V5cHJlc3M9ImFwZW5hc051bWVyb3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9InNvbWFRdGRlT3BlcmFkb3Jlc0NhcGFjaWRhZGVQcm9kdXRpdmEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXRlbTIucXRkZVBlY2FNaW51dG9PcGVyYWRvciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiA0M3B4OyBib3JkZXItd2lkdGg6IDFweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXRlbTIucXRkZVBlY2FPcGVyYWRvclByb2R1Y2FvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IDQzcHg7IGJvcmRlci13aWR0aDogMXB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIHNtPSIxMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0aW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXRlbTIub3BlcmFkb3JYdGltZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiA0M3B4OyBib3JkZXItd2lkdGg6IDFweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA9IjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxldGVJdGVtQ2FwYWNpZGFkZShpdGVtMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPm1kaS1kZWxldGU8L3YtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L3YtZGF0YS10YWJsZT4KCiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPC92LWRhdGEtdGFibGU+CiAgICAgICAgPC92LWNvbD4KICAgICAgPC92LXJvdz4KCiAgICAgIDxiciAvPgoKICAgICAgPCEtLSA8di1yb3c+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMiI+CiAgICAgICAgICA8c3Bhbj48Yj5SZWN1cnNvcyBUw6ljbmljb3M8L2I+PC9zcGFuPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMSI+CiAgICAgICAgICA8di1idG4KICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi10b3A6IC04cHg7IG1hcmdpbi1sZWZ0OiAtMjVweCIKICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgdi1pZj0iIWlzTW9iaWxlIgogICAgICAgICAgICBjb2xvcj0iI0ZCOTUxNCIKICAgICAgICAgICAgZmFiCiAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgQGNsaWNrPSJhZGRSZWN1cnNvc1RlY25pY29zKCkiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWljb24gZGFyaz5tZGktcGx1czwvdi1pY29uPgogICAgICAgICAgPC92LWJ0bj4KICAgICAgICA8L3YtY29sPgogICAgICA8L3Ytcm93PiAtLT4KCiAgICAgIDwhLS0gVEFCTEUgQ1BBQ0lEQURFIFggSEFCSUxJREFERSAtIFJFQ1VSU08gVEVDTklDTy0tPgogICAgICA8IS0tIDx2LXJvdyBhbGlnbj0iY2VudGVyIiBqdXN0aWZ5PSJjZW50ZXIiPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICA8di1kYXRhLXRhYmxlCiAgICAgICAgICAgIDpoZWFkZXJzPSJoZWFkZXJzTGluaGEiCiAgICAgICAgICAgIDppdGVtcz0iaXRlbnNSZWN1cnNvVGVjbmljb0xpbmhhIgogICAgICAgICAgICA6c2luZ2xlLWV4cGFuZD0ic2luZ2xlRXhwYW5kIgogICAgICAgICAgICBpdGVtLWtleT0iaWQiCiAgICAgICAgICAgIHNob3ctZXhwYW5kCiAgICAgICAgICAgIGNsYXNzPSJlbGV2YXRpb24tMSIKICAgICAgICAgICAgaGlkZS1kZWZhdWx0LWhlYWRlcgogICAgICAgICAgICBoaWRlLWRlZmF1bHQtZm9vdGVyCiAgICAgICAgICA+CiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6aXRlbS5mYXNlPSJ7IGl0ZW0gfSI+CiAgICAgICAgICAgICAge3sgaXRlbS5wcm9jZXNzb0RUT0Zhc2Uubm9tZSB9fQogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4cGFuZGVkLWl0ZW09InsgaGVhZGVycywgaXRlbSB9Ij4KICAgICAgICAgICAgICA8dGQgOmNvbHNwYW49ImhlYWRlcnMubGVuZ3RoIj4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx2LWRhdGEtdGFibGUKICAgICAgICAgICAgICAgICAgOmhlYWRlcnM9ImhlYWRlcnNSZWN1cnNvVGVjbmljbyIKICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVtLmxpbmhhUmVjdXJzb1RlY25pY29IYWJpbGlkYWRlcyIKICAgICAgICAgICAgICAgICAgaGlkZS1kZWZhdWx0LWZvb3RlcgogICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLXRvcDogMTVweCIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImVsZXZhdGlvbi0xIG15dGFibGUiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT0ieyBpdGVtcyB9Ij4KICAgICAgICAgICAgICAgICAgICA8dHIgdi1mb3I9IihpdGVtMiwgaW5kZXgpIGluIGl0ZW1zIiA6a2V5PSJpbmRleCI+CiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5wcm9jZXNzb0RUT09wZXJhY2FvLm5vbWUgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbTIucHJvY2Vzc29EVE9IYWJpbGlkYWRlLm5vbWUgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBzbT0iMTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0ibnVtYmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXRlbTIucXRkZU9wZXJhZG9yZXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImhlaWdodDogNDNweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpydWxlcz0iWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKSA9PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghIWl0ZW0yLnF0ZGVPcGVyYWRvcmVzICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtMi5xdGRlT3BlcmFkb3Jlcy5sZW5ndGggPD0gMTUpIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCcnICYmICEhaXRlbTIucXRkZU9wZXJhZG9yZXMgPCAxKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJhcGVuYXNOdW1lcm9zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJzb21hUXRkZU9wZXJhZG9yZXNDYXBhY2lkYWRlUHJvZHV0aXZhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImRlbGV0ZUl0ZW1SZWN1cnNvVGVjbmljbyhpdGVtMikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPm1kaS1kZWxldGU8L3YtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICA8L3YtZGF0YS10YWJsZT4KCiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPC92LWRhdGEtdGFibGU+CiAgICAgICAgPC92LWNvbD4KICAgICAgPC92LXJvdz4gLS0+CgogICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgPHYtYnRuCiAgICAgICAgICBjb2xvcj0ib3JhbmdlIGxpZ2h0ZW4tMSIKICAgICAgICAgIHYtaWY9InRpcG9DYWQgPT0gMSIKICAgICAgICAgIEBjbGljaz0iY2FuY2VsYXJMaW5oYSgpIgogICAgICAgICAgbGFyZ2UKICAgICAgICAgIGRhcmsKICAgICAgICAgIHdpZHRoPSIxNTAiCiAgICAgICAgICA+Q2FuY2VsYXI8L3YtYnRuCiAgICAgICAgPgogICAgICAgIDx2LWJ0bgogICAgICAgICAgY29sb3I9Im9yYW5nZSBsaWdodGVuLTEiCiAgICAgICAgICB2LWlmPSJ0aXBvQ2FkID09IDIiCiAgICAgICAgICBAY2xpY2s9InJldG9ybmFMaXN0YUxpbmhhcygpIgogICAgICAgICAgbGFyZ2UKICAgICAgICAgIGRhcmsKICAgICAgICAgIHdpZHRoPSIxNTAiCiAgICAgICAgICA+Q2FuY2VsYXI8L3YtYnRuCiAgICAgICAgPgoKICAgICAgICA8di1idG4KICAgICAgICAgIHYtaWY9IiFpc01vYmlsZSAmJiBpZExpbmhhIgogICAgICAgICAgY29sb3I9Im9yYW5nZSBkYXJrZW4tMSIKICAgICAgICAgIGxhcmdlCiAgICAgICAgICBkYXJrCiAgICAgICAgICB3aWR0aD0iMTUwIgogICAgICAgICAgQGNsaWNrPSJ1cGRhdGVMaW5oYSgpIgogICAgICAgICAgPlNhbHZhcjwvdi1idG4KICAgICAgICA+CgogICAgICAgIDx2LWJ0bgogICAgICAgICAgdi1pZj0iIWlzTW9iaWxlICYmICFpZExpbmhhIgogICAgICAgICAgY29sb3I9Im9yYW5nZSBkYXJrZW4tMSIKICAgICAgICAgIGxhcmdlCiAgICAgICAgICBkYXJrCiAgICAgICAgICB3aWR0aD0iMTUwIgogICAgICAgICAgQGNsaWNrPSJzYXZlTGluaGEoKSIKICAgICAgICAgID5TYWx2YXI8L3YtYnRuCiAgICAgICAgPgoKICAgICAgICA8di1idG4KICAgICAgICAgIHYtZWxzZS1pZj0iaXNNb2JpbGUgJiYgIWlkTGluaGEiCiAgICAgICAgICBjb2xvcj0ib3JhbmdlIGRhcmtlbi0xIgogICAgICAgICAgbGFyZ2UKICAgICAgICAgIGRhcmsKICAgICAgICAgIHdpZHRoPSIxNTAiCiAgICAgICAgICBAY2xpY2s9InNhdmVMaW5oYSgpIgogICAgICAgICAgPlNhbHZhcjwvdi1idG4KICAgICAgICA+CiAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICA8L3YtY29sPgoKICAgIDwhLS0gPC92LXJvdz4gLS0+CiAgPC92LWNvbnRhaW5lcj4KPC92LWNvbnRlbnQ+Cg=="},null]}